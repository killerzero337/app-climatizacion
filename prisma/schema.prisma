generator client {
  provider = "prisma-client-js"
}

//datasource db {
//  provider  = "postgresql"
//  url  	    = env("DATABASE_URL")
//  directUrl = env("DIRECT_URL")
//}

// datasource db {
//   provider = "mysql"
//   url      = env("DATABASE_URL")
// }

// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id            String     @id @default(cuid())
  name          String
  email         String?    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          String?    @default("USER") // o  ADMIN
  accounts      Account[]
  proyectos     Proyecto[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

//En el proyecto de momento se aÃ±adira solo un recinto
model Proyecto {
  id               Int       @id @default(autoincrement())
  nombre           String
  localidad        String
  userId           String?
  user             User?     @relation(fields: [userId], references: [id])
  fecha            DateTime?
  temp_ext_ver     Float?
  hr_ext_ver       Float?
  temp_ext_inv     Float?
  hr_ext_inv       Float?
  altitud          Float?
  zona_climatica   String?
  oda              String?
  us_um            Float?
  uc               Float?
  ut_umd           Float?
  uh               Float?
  up               Float?
  uph              Float?
  upv              Float?
  uphv             Float?
  tph              Float?
  tpv              Float?
  tphv             Float?
  numero_personas  Int?
  w_persona        Float?
  carga_latente    Float?
  caudales_ida     Float?
  caudales_aire    Float?
  tipo_lampara     String?
  potencia_lampara Float?
  valor_seguridad  Float?
  comentarios      String?
  imagen           String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  recintos         Recinto[]

  @@index([userId], name: "user_id_index")
}

model Recinto {
  id     Int     @id @default(autoincrement())
  nombre String?

  // Valores relativos al recinto
  T_ver_relativa  Float?
  T_inv_relativa  Float?
  hr_ver_relativa Float?
  hr_inv_relativa Float?
  longitud        Float?
  anchura         Float?
  altura          Float?
  volumen         Float?
  ida             String?

  //Valores de cada recinto
  orientacion         String?
  ubicacion_c_1       String?
  temperatura_ver_c_1 Float?
  temperatura_inv_c_1 Float?
  superficie_c_1      Float?
  

  //Valores de techo
  techo_ubicacion String?
  techo_temp_ver  String?
  techo_temp_inv  String?

  Suelo

  cerramiento1_ubicacion String?

  proyecto   Proyecto? @relation(fields: [proyectoId], references: [id], onDelete: Cascade)
  proyectoId Int?
}
