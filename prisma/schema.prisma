generator client {
  provider = "prisma-client-js"
}

//datasource db {
//  provider  = "postgresql"
//  url  	    = env("DATABASE_URL")
//  directUrl = env("DIRECT_URL")
//}

// datasource db {
//   provider = "mysql"
//   url      = env("DATABASE_URL")
// }

// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id            String     @id @default(cuid())
  name          String
  email         String?    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          String?    @default("USER") // o  ADMIN
  accounts      Account[]
  proyectos     Proyecto[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Proyecto {
  id                   Int       @id @default(autoincrement())
  nombre               String
  localidad            String
  userId               String?
  user                 User?     @relation(fields: [userId], references: [id])
  fecha                DateTime?
  temp_ext_ver         Float?
  hr_ext_ver           Float?
  temp_ext_inv         Float?
  hr_ext_inv           Float?
  temp_terreno_ver     Float?
  temp_terreno_inv     Float?
  altitud              Float?
  zona_climatica       String?
  oda                  String?
  us_um                Float?
  uc                   Float?
  ut_umd               Float?
  uh                   Float?
  up                   Float?
  uph                  Float?
  upv                  Float?
  uphv                 Float?
  tph                  Float?
  tpv                  Float?
  tphv                 Float?
  numero_personas      Int?
  w_persona            Float?
  carga_latente        Float?
  ocupacion_personas   String?
  caudales_ida         Float?
  caudales_aire        Float?
  tipo_lampara         String?
  potencia_lampara     Float?
  valor_seguridad      Float?
  factorFuncionamiento Float?
  comentarios          String?
  imagen               String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  recintos Recinto[]
  equipos  Equipo[]

  @@index([userId], name: "user_id_index")
}

model Equipo {
  id                    Int       @id @default(autoincrement())
  proyectoId            Int?
  nombre                String?
  potencia              Float?
  factor_funcionamiento Float?
  proyecto              Proyecto? @relation(fields: [proyectoId], references: [id], onDelete: Cascade)
}

model Recinto {
  id     Int     @id @default(autoincrement())
  nombre String?

  // Valores relativos al recinto
  t_ver_relativa  Float?
  t_inv_relativa  Float?
  hr_ver_relativa Float?
  hr_inv_relativa Float?
  longitud        Float?
  anchura         Float?
  altura          Float?
  volumen         Float?
  ida             String?

  //Valores de cerramiento 1
  orientacion            String?
  ubicacion_c_1          String?
  color_c_1              String?
  temperatura_ver_c_1    Float?
  temperatura_inv_c_1    Float?
  superficie_c_1         Float?
  superficie_vidrio_c_1  Float?
  tipo_vidrio_c_1        String?
  superficie_puertas_c_1 Float?

  //Valores de cerramiento 2

  orientacion_2          String?
  ubicacion_c_2          String?
  color_c_2              String?
  temperatura_ver_c_2    Float?
  temperatura_inv_c_2    Float?
  superficie_c_2         Float?
  superficie_vidrio_c_2  Float?
  tipo_vidrio_c_2        String?
  superficie_puertas_c_2 Float?

  //Valores de cerramiento 3
  orientacion_3          String?
  ubicacion_c_3          String?
  color_c_3              String?
  temperatura_ver_c_3    Float?
  temperatura_inv_c_3    Float?
  superficie_c_3         Float?
  superficie_vidrio_c_3  Float?
  tipo_vidrio_c_3        String?
  superficie_puertas_c_3 Float?

  //Valores de cerramiento 4

  orientacion_4          String?
  ubicacion_c_4          String?
  color_c_4              String?
  temperatura_ver_c_4    Float?
  temperatura_inv_c_4    Float?
  superficie_c_4         Float?
  superficie_vidrio_c_4  Float?
  tipo_vidrio_c_4        String?
  superficie_puertas_c_4 Float?

  //Valores suelo
  ubicacion_suelo       String?
  temperatura_ver_suelo Float?
  temperatura_inv_suelo Float?
  superficie_suelo      Float?

  //Valores de techo
  orientacion_techo     String?
  ubicacion_techo       String?
  temperatura_ver_techo Float?
  temperatura_inv_techo Float?
  superficie_techo      Float?
  tipo_vidrio_techo     String?

  proyecto   Proyecto? @relation(fields: [proyectoId], references: [id], onDelete: Cascade)
  proyectoId Int?
}
